import os
import argparse
from pathlib import Path

# From session
from utils.neuralnetwork import NeuralNetwork

from utils.load_mnist import load_mnist

from sklearn import metrics
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer

def main(data_dir_path, epochs):
    # Load data - load_mnist returns a numpy array
    image, label = load_mnist(data_dir_path)

    # Normalization based on the assumption that the pixel intensity is between 0 and 255
    image = image / 255.0

    # Get number of unique classes for output layer size
    classes = set(label)
    num_classes = len(classes)

    # split data into test and training
    img_train, img_test, label_train, label_test = train_test_split(image, label, random_state=1337, test_size=0.2)

    # convert labels to binary representation
    label_train = LabelBinarizer().fit_transform(label_train)
    label_test = LabelBinarizer().fit_transform(label_test)

    # specify the neural network structure with 2 small hidden layers
    # 
    neural_network = NeuralNetwork([img_train.shape[1], 32, 16, num_classes]) # 1 input node for every pixel in images, 1 output node for every class

    # train the model
    neural_network.fit(img_train, label_train, epochs=epochs) # prints loss every 100 epochs

    # make predictions on all test images
    label_pred = neural_network.predict(img_test)
    label_pred = label_pred.argmax(axis=1) # give us the highest probability label

    # generate comparative metrics with test data
    classifier_metrics = metrics.classification_report(label_test.argmax(axis=1), label_pred)

    # save & display metrics
    with open('output/nn_metrics.txt', 'w') as output:
        output.write(classifier_metrics)

    print(classifier_metrics)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description = "a script that trains a neural network on the mnist_784 dataset and generates a metrics report for the classifier")
    parser.add_argument("--data_dir_path", default = Path('./data'), type = Path, help = "path to the destination or location of the mnist csv-files generated by load_mnist.py")
    parser.add_argument("--epochs", default = 5, type = int, help = "number of epochs to train")

    args = parser.parse_args()
    
    main(data_path = args.data_dir_path, epochs = args.epochs)